<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 算法基础 | Xutianming Blog]]></title>
  <link href="http://xutianming.github.io/blog/categories/suan-fa-ji-chu/atom.xml" rel="self"/>
  <link href="http://xutianming.github.io/"/>
  <updated>2013-08-07T10:03:25+08:00</updated>
  <id>http://xutianming.github.io/</id>
  <author>
    <name><![CDATA[Xutianming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[C++输入输出总结]]></title>
    <link href="http://xutianming.github.io/blog/2013/08/07/c-plus-plus-input-and-output/"/>
    <updated>2013-08-07T09:23:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/08/07/c-plus-plus-input-and-output</id>
    <content type="html"><![CDATA[<p>输入：
1 . 未说明有多少个input block</p>

<pre><code>C:    while(scanf("%d %d",&amp;a,&amp;b)!=EOF) 
{    ...    }scanf返回的是输入的变量的个数，EOF=-1表示没有输入    
C++：    while(cin&gt;&gt;a&gt;&gt;b) {    ...    }2 . 说明有N个input block    
C：    scanf("%d",&amp;n) ;    for( i=0 ; i&lt;n ; i++ )     {...}     C++： cin &gt;&gt; n;   for( i=0 ; i&lt;n ; i++ )     { .... } 3 . 输入是一整行的字符串  
C语法：    char buf[20];       gets(buf);     C++语法：   如果用string buf;来保存：        getline( cin , buf );   如果用char buf[ 255 ]; 来保存：      cin.getline( buf, 255 );scanf(“ %s%s”,str1,str2)，在多个字符串之间用一个或多个空格分隔；若使用gets函数，应为gets(str1); gets(str2); 字符串之间用回车符作分隔。通常情况下，接受短字符用scanf函数，接受长字符用gets函数。而getchar函数每次只接受一个字符，经常c=getchar()这样来使用。getline 是一个函数，它可以接受用户的输入的字符，直到已达指定个数，或者用户输入了特定的字符。它的函数声明形式（函数原型）如下：  istream&amp; getline(char line[], int size, char endchar = '\n');不用管它的返回类型，来关心它的三个参数：
</code></pre>

<ul>
<li>char line[]： 就是一个字符数组，用户输入的内容将存入在该数组内。<em> int size : 最多接受几个字符？用户超过size的输入都将不被接受。</em> char endchar :当用户输入endchar指定的字符时，自动结束。默认是回车符。例如：char name[4];cin.getline(name,4,&lsquo;\n&rsquo;);由于 endchar 默认已经是 &lsquo;\n'，所以后面那行也可以写成：cin.getline(name,4);输出：
1 . 输出之后换行        C语法：    {      &hellip;.      printf(&ldquo;%d\n&rdquo;,ans);    }     C++语法：  {     &hellip;     cout &lt;&lt; ans &lt;&lt; endl;     } 2 . 每个输出之间有空行
  while(scanf(&ldquo;%d %d&rdquo;,&amp;a, &amp;b) != EOF)             printf(&ldquo;%d\n\n&rdquo;,a+b);    cout &lt;&lt; ans &lt;&lt; endl &lt;&lt; endl; 3 . 输出结束之后输出空行
  C语法：  for (k=0;k&lt;count;k++) {       while (…) {              printf(&ldquo; %d\n&rdquo;,result);     <br/>
    }     <br/>
    if (k!=count-1) printf(&ldquo;\n&rdquo;);   <br/>
  }     C++语法：  类似，输出语句换一下即可。
在学习了以上基础之后，我在HDUOJ上做了十几个题目来练习，也犯了不少错误，总结如下，以避免以后再犯，提高编程的成功率和效率：</li>
<li>未说明有多少个输入块时，scanf要和EOF比较，这个和cin的使用不同，不然的话OJ上会超时</li>
<li>同样的道理，也不要用<code>while(true)</code>来代替<code>while(cin&gt;&gt;a)</code>，也会在输入结束的时候，仍然执行从而超时</li>
<li>再就是输出有换行，要输出两个<code>endl</code>的时候，要注意假如指定输入个数，最后一次输出之后，不要再换行的。没指定有多少个输入的时候，则每次输出都换行。
另外，我还犯了其他一些低级错误，比如数据类型定义错误等等，这些错误自己调试的时候，不会出错，但是OJ上指定的某些测试用例肯定是没法通过的。所以要格外小心，OJ也不会告诉你哪个测试用例挂了，就很浪费时间，为了提高效率，写程序的时候就得多注意下，看清题目。</li>
</ul>

]]></content>
  </entry>
  
</feed>
