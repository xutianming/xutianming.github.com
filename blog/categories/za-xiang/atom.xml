<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 杂项 | Xutianming Blog]]></title>
  <link href="http://xutianming.github.io/blog/categories/za-xiang/atom.xml" rel="self"/>
  <link href="http://xutianming.github.io/"/>
  <updated>2014-12-17T20:18:22+08:00</updated>
  <id>http://xutianming.github.io/</id>
  <author>
    <name><![CDATA[Xutianming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[对算法、工程和个人方向的一些小思考]]></title>
    <link href="http://xutianming.github.io/blog/2014/08/02/a-brief-summary-of-internship-in-alibaba/"/>
    <updated>2014-08-02T15:48:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2014/08/02/a-brief-summary-of-internship-in-alibaba</id>
    <content type="html"><![CDATA[<p>从5月份从搜狐离职进入阿里实习，已经有几个月没写博客了。这也基本上反映了我这段时间的状态，实习、个人学习，占据了这段时间我的所有时间。一直拼命奔跑，很久没停下来好好思考总结下了。校招马上开始，陆续会有很多面试，也是时候对自己的这段时间进行下回顾和思考了。</p>

<p>去年底来到搜狐，和克竞的合作，让我慢慢真正走入了算法的大门，让我对机器学习的理论有了一些比较深刻的认识，当然仅仅限于算法本身，我的工作，并没有涉及太多的业务。我也做了不少和算法工程实现相关的工作，也接触到了Spark。克竞离职之后，很多事情青黄不接，我的工作也一直没有太大进展，考虑到时间的宝贵，我离开搜狐来到了阿里，投奔钩哥。说是“投奔”钩哥，确实如此。我抱着可以对机器学习有更加深入的理解的目的，来到新的工作环境，开始了我新的旅行。如果说，在搜狐我真正接触了算法，那么在阿里，我对业界的算法有了更加真实的认识和一些理性的思考。</p>

<p>阿里是一家相当务实的公司，所有的工作都是以业务发展为导向的。我所在的爱淘宝，目前的算法工作，主要是以策略为主，大多用传统的数据挖掘方法，机器学习的模型尚未大量使用。这一点，和我在搜狐研究院的时候的认识，有着比较大的出入，当时团队在工作的时候，更偏向于使用模型来解决问题。这是两种做事的风格，Leader作出这些选择，都是从团队的位置和目的出发的，无法评价说孰优孰劣。只能说，从对业务的发展来看，阿里更加务实，也会更加快速的迭代，业务发展更快。</p>

<p>如此来说，短短几个月的实习时间里，我很难接触到模型相关的工作，而我个人并不是特别喜欢过早是深入某个业务领域。而各种数据权限限制，也让我这个实习生很难完全接触到阿里丰富的数据。我认识到这些，大约花了一个月的时间。接下来，我作出了转变。</p>

<p>我在阿里的师兄是大家认可的团队里的技术大牛。我申请做了一些C++线上服务开发，也就是偏工程的工作。之前C++的学习和积累得到了发挥，我的工作也得到了师兄的认可，第一个项目马上就要上线，紧接着就要开始第二个项目了。</p>

<p>这些经历让我慢慢发现了自己更加喜欢、也可能对我来说最现实的工作：那就是转而做系统。</p>

<p>首先，做算法，对我来说，并不现实。技术要为业务服务，算法也不例外。要想成功的完成一个算法项目，特别是利用机器学习的方法。需要两方面：对数据的深刻理解和对模型的深刻理解。两者缺一不可。盲目的使用模型，不会带来效果的提升，消耗大量工作力而没有效果，在公司中对自己非常不利。那么更加务实的方法，就是先去理解数据，从分析业务，先解决关键问题，脚踏实地，一步一步优化效果。对数据理解足够深刻之后，算法工程师的模型方面的知识才会派上用场。前者需要时间沉淀，后者需要深厚的理论知识背景。总得来说，我两方面都没有，更关键的是，专注业务会让我越来越远离自己想成为的人。</p>

<p>然后，一直以来，我都追求技术上的成就，希望成为一名出色的工程师。更加现实的，想要在互联网行业里有比较好的发展，技术是立足之本。繁重的业务需求，会让人停留于表面，技术上毫无成长，更好的方式显然是在业务成长的同时获得个人技术沉淀。但是，这样共同成长现实么？不得不说，大部分人做不好。目前国内互联网的发展思路是“快”，凡是讲究快速上线、快速迭代，业务上无创新、无改变，意味着离死也不远了（公司核心营收大头除外，比如搜索广告）。在这个背景下，大部分团队，都是一招鲜吃遍天，不断的使用现有框架进行业务扩展。技术上的纵深发展很少。</p>

<p>那么个人的成长，如何来实现呢？靠团队、靠自己。在更好的技术团队工作，在业务线上工作的同时，注重个人的技术积累。就目前我的认识，总结来说，分布式、并发、高性能、网络编程都是行业中非常核心的技术，个人纵深的发展，一定要落入某个桶中。而语言和算法，是核心基础。团队也非常重要，但是由于信息的高度不对称，找到一个靠谱的团队并且能顺利进入，太难了。</p>

<p>不得不说，这一点上，淘宝的正明做得简直太好了。一直利用自己在技术上的深入研究，为阿里开源节流，和公司共同成长，让人佩服不已。</p>

<p>综上来看，做系统、平台开发，做工程，对我来说是一个相对来说比较现实的选择。特别是机器学习算法相关的工程实现的话，便既可以让我继续研究和学习算法又可以与业务保持一定的距离，更专注于技术本身。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由invocationTargetException引发的思考]]></title>
    <link href="http://xutianming.github.io/blog/2013/07/11/invocation-target-exception/"/>
    <updated>2013-07-11T16:28:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/07/11/invocation-target-exception</id>
    <content type="html"><![CDATA[<p>最近接到的项目，终于过了第一轮，兴奋之余还是要静下心来好好研究代码。第二轮得分只有60分，意料之中，做的时候就发现有很多不会的了，当时及时记录下来，所以这次看代码也有针对性的多。</p>

<p>逻辑代码最大的问题还是出在异常处理上，有很多不合适的地方，不过经历过这次下次应该不会再犯了。测试依然疑问最多，很多莫名的异常不知道如何抛出，归根到底还是Java的基础不牢，不过这也不是一天两天的事情，见的多了自然熟悉。</p>

<p>今天看到一个很常见的异常&mdash;InvocationTargetException，顾名思义，在反射机制中，如果当前执行的方法所调用的方法抛出异常，会被包装成这个异常，</p>

<p>当然这在之前我是不知道的。因为在coding的时候，一写反射的语句，IDE会自动提示需要处理这个异常，于是乎很自然而然的就写上了catch（InvocationTargetException），不需要理由。可是当编写单元测试的时候问题就来了，你需要构造一套参数，让函数抛出这个异常以验证代码可以捕获这个异常。</p>

<p>最一开始是从研究Winner的代码开始的，看到Winner写的对应的测试，很是摸不着头脑，不知道Winner的参数为何可以导致异常，上网查资料，除了API只外几乎没有任何资料，API中对于这个异常又描述甚少。手头的各种Java工具书这时候也派不上用场了。无计可施，只好请教学长。其实这个问题大家平时都遇到过，因为反射是TC上最常用到的技术之一，可能是因为太不显眼，所以大家之前都不约而同的无视它了。现在提出来，于是我们一起摸索。</p>

<p>摸索的过程也是我学习的过程，很多思想我慢慢树立起来。构造异常测试，首先看配置文件，因为参数的不合法是导致异常的最常见原因。总之要充分利用项目文档所提供给我们的信息，这可以极大的提高开发的效率和质量。毕竟很多问题已经不需要我们去思考了，designer已经为我们考虑到，我们只需要照做。对于如此短的项目周期来说，这一点很重要。</p>

<p>这个异常是反射机制定义的异常，自然在开发文档中找不到了。接下来我们还是走了小小的弯路，我们找来了JDK的源码&hellip;&hellip;各种复杂的关系和调用，最终崩溃。放弃&hellip;&hellip;不过我还是学了一小招。参考源码确实能解决很多问题，但是这在简单的类中比较实用。比如说String这样的类，里面的诸如substring ,spilt等方法可以给我们提供算法的灵感。</p>

<p>学习Java最直接的工具还是API文档了。我无意间查到了抛出这个异常的newInstance方法，下面明确写着，当新建对象的类构造方法在被调用时抛出异常，此异常将被抛出。问题解决了：测试者提供的给构造方法的参数有两个，而此类构造方法只接受一个参数，于是乎异常被抛出。</p>

<p>最终的答案是简单的，但是要是在项目开发中意识到这个问题难度还是很大的，需要有对项目足够的理解再加上足够的开发经验才能做到。对项目整体功能的把握和对每个细节精确的理解，是我所发现的最大差距所在，也将是我近期努力的目标。毕竟所掌握的技术和各种编码技巧不是一个技术人员价值的最大体现。严谨的思维和对细节的把握才是技术人员身上的闪光点，这是无可替代的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客迁移声明]]></title>
    <link href="http://xutianming.github.io/blog/2013/07/11/blog-migration-announcement-and-markdown-trial/"/>
    <updated>2013-07-11T13:12:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/07/11/blog-migration-announcement-and-markdown-trial</id>
    <content type="html"><![CDATA[<p>从今天起，就要从原先的博客园博客迁移到我的github博客啦。以后这个博客上会更多的放我自己写的东西，然后博客园的博客用来进行日常学习摘抄和积累，毕竟博客园博客写起来更方便一些，也不需要在我的机器上。</p>

<p>由于现在这个博客很空，这几天我会陆续搬一些以前我自己写的东西在这上面，这样可以帮助我快速掌握这个博客的使用方法，并且也熟悉一下markdown的语法，以后真要写东西就不会为这些事情烦心了。</p>

<p>终于有了属于自己的博客站点，好开心，感谢github，感谢octopress。</p>
]]></content>
  </entry>
  
</feed>
