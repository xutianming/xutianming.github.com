<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Xutianming Blog]]></title>
  <link href="http://xutianming.github.io/atom.xml" rel="self"/>
  <link href="http://xutianming.github.io/"/>
  <updated>2013-09-24T21:56:54+08:00</updated>
  <id>http://xutianming.github.io/</id>
  <author>
    <name><![CDATA[Xutianming]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[知识可视化项目第一阶段总结2]]></title>
    <link href="http://xutianming.github.io/blog/2013/09/24/summary-of-wikivis-project-2/"/>
    <updated>2013-09-24T21:15:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/09/24/summary-of-wikivis-project-2</id>
    <content type="html"><![CDATA[<p>今天和乐乐讨论了发表了Wikipedia Miner思路的论文，感觉颇深，故在此记录一下。</p>

<p>今天其实并没有讨论太多论文的内容，主要是基于项目第一阶段的反思，所以感觉还是很有意义的。这样的话，可以一步一步的提高我们解决问题的能力。关于面对一个要解决的课题的时候，我们从什么角度去思考它的解决方案，以及在目前的解决方案遇到了问题，走入了死胡同，如何调整路线，以最终找到那条正确的道路。</p>

<p>第一个问题是关于思考问题的角度。很明显，在第一阶段的项目进展中，我们并不成功，没有找到一种泛化能力非常好的算法，来对维基百科的数据进行有效的挖掘。在今天读了论文之后，发现论文作者和我们对于问题的思考思路是完全不同的。具体来讲，论文的课题是要解决“给哪些词加链接，有助于读者理解当前的文章”，而我们的目的是“有哪些关键字，可以很好的代表这篇文章，我们要给出这些关键字对应的维基百科链接”（这里仅指我们项目中的关键词打分步骤）。从这个角度看，我们要解决的问题其实是一致的，但是我们分别采用了什么样的思路来思考问题的呢？首先讲论文中的思路，维基百科中现有的有链接的文章是标注好的语料，那么满足什么条件的词是重要的关键字，需要加链接呢？我可以利用机器学习的方法来训练一个模型。首先根据经验选择一些特征，再利用有标注的训练数据，选择合适的算法，这样就可以学习模型了。这个模型告诉我们，在一篇文章里，那些词是关键字。那么，我之前使用的思路是什么呢？在语料充足的情况下，我们有很多统计量，比如卡方、平均值、标准差、余弦距离等等。那么用哪个统计量去描述关键词的特征最好呢？于是自然而然的想到了关键词提取，根据前人论文中提出的方法实现了。</p>

<p>这是两个解决问题的思路。不能说两个思路哪个好哪个坏，因为没什么可比性。这两种方法，前者立足于学习筛选关键字的标准，而后者立足于，我用什么样的标准，可以筛选出关键字。但是实践证明，解决我这个项目的问题，前者更好（Wikipedia Miner关键词挖掘效果很好）。因为在我的方法中，有个致命的弱点，就是语料。我是从一篇文章中根据统计规律去提取关键字，每个主题，使用什么词、什么词关键都满足一定的统计规律。那么语料不足怎么办？争取在不改变统计规律的前提下扩充语料，这一点太难做到了。而论文中的方法呢，学习的是标注关键字的方法，假定不论什么主题，哪些关键字重要，都是满足一定的准则的。显然后者更加符合维基百科的特点，详见<a href="http://en.wikipedia.org/wiki/Wikipedia:Manual_of_Style/Linking">维基百科规则</a></p>

<p>下面讨论第二个问题，其实是个知识面的问题。因为最终乐乐发现，在我们读的这篇论文描述前人工作的时候提到了关键字提取相关的技术，在一篇综述性的文献中。而论文的作者，正是在前人工作的基础上，提出了这种方法，在2008年。按理说过去这么久了，为什么我们在最初确定技术方案的时候，没有找到现在这个更好的解决方案呢？因为我们使用的谷歌学术中没有收录那篇文章，并且在最初我们对于这个领域比较陌生的时候，很难使用准确的关键字去在搜索引擎上搜索，所以也就比较难一下子就找到最好的解决方案。也是经过了一段时间的研究和摸索，机缘巧合下，我的导师给我推荐了Wikipedia Miner。我才发现我们的问题已经有了这么优秀的解决方案了。</p>

<p>仔细想想呢，这其实涉及到了领域知识的问题。用什么技术，解决什么问题，是要经过长期实践积累经验的。随着阅历的提升，知道的办法越多，就越有解决问题的能力。在这一点上，我的导师自然大大的超越了我们。不过如何更有效的利用各种学术资源，会议门户啊、学术搜索啊、学术数据库等等，回头我还是要好好向我的导师请教一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[知识可视化项目第一阶段小结]]></title>
    <link href="http://xutianming.github.io/blog/2013/09/23/summary-of-knowledge-visualization-project-stage-1/"/>
    <updated>2013-09-23T14:44:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/09/23/summary-of-knowledge-visualization-project-stage-1</id>
    <content type="html"><![CDATA[<p>距离开始做数据可视化项目，已经过去了将近一个月的时间，目前项目的进展暂时告一段落，技术探索的工作基本完成，是个时候小结一下了。</p>

<p>目前项目的思路是这样的，以维基百科为数据源，将维基百科上的知识（目前以机器学习为例）用可视化的方式展现，提高学习和探索的效率。</p>

<p>具体来说，第一步。编写网页爬虫，从维基百科上下载数据，并且存储成结构化的数据（目前采用XML），存储的内容包括分类、关键词定义、页面关键词、参考文献。其中，关键词的定义，我们认为是维基百科词条页面的第一段，实际效果还不错，第一段文字往往能很好的直接阐释关键字的含义。页面关键词，就是那些本页面中比较重要的词，要想很好的了解本页面的内容，这些关键词对应的内容是非常重要的参考资料，在实现中，我们以页面内容中超链接的锚文字为基础，筛选那些链接指向的页面也包含本页关键字的链接锚文字，这一点是受到PageRank的思想所启发的；就效果来看，关键字筛选效果良好，但是这个条件明显太强了，在两个条件的限制下，大部分页面都只有7个以下的关键字，这样使得可视化的意义不大了，因为内容本来不多的情况下，单纯的文本就很容易理解的。参考文献，就是单纯是指维基百科词条页面中的参考文献，在目前的实现中，这些数据并没有加以利用。至于这些内容是如何从Web页面中提取的，主要靠对页面结构的分析，编写在网页爬虫的逻辑中。</p>

<p>第二步，是文本挖掘相关。针对上面的页面关键词，我们想要给每个页面关键词，根据相关度进行打分，然后根据这个相关度打分，进行进一步的可视化，比如比较重要的关键词Size比较大什么的。具体研究，使用了NLP中称为关键字提取（Keyword Extraction）的技术，通过阅读相关论文，确定了卡方相关性检验和仿PageRank的TextRank算法这两种技术方案。二选其一的话，我们选择了卡方检验，因为TextRank对我们来说有一些致命的缺点，比如计算量大、基于词在滑动窗口中的同时出现等等。相对来说，卡方检验对我们来说，要现实的多。</p>

<p>在我们参考的论文中，作者针对单篇论文，对关键字进行提取，打分自然就是卡方值。对语料数量的要求都不是特别高，但是对我们来说，我们现有的语料还是太少了，维基百科一般的词条页面中内容很少，用这些来进行关键词提取的话，估计效果甚微。于是我们决定扩充语料，经过研究，我们决定利用机器学习方面的会议(NIPS)及其提供的搜索引擎。因为项目做到这里我们已经决定先就一个词条，进行挖掘，实验下看下效果，所以就选了Machine_learning这个词条。扩充语料的过程还是用爬虫来完成的，模拟执行搜索引擎搜索，爬10篇论文下来作为语料。期间需要把pdf格式的转化成文本。经过一些折磨好歹完成语料的准备之后，开始进行关键词提取了，具体过程，一开始，我们想就第一步率先选出的关键字进行打分，算卡方值。但是语料准备好之后发现，我们选出的那些关键字，在这10篇论文中出现很少。究其原因，主要是我们扩充语料的思路有问题，试想维基百科中的词条，应该是比较宽泛的介绍性文字，而论文多是针对领域中某个小的问题的。从维基百科中挖掘出的关键词，很难应用到论文的语料中来。所以只能再次委曲求全，放弃对维基百科的关键字进行打分，改为直接从论文语料中进行关键词提取。</p>

<p>接下来的过程就是按照论文中的方法一步一步来了，涉及到词干提取，词组提取，词组聚类，计算卡方值等等。也顺利提取出了关键字，效果还不错。这么一来数据挖掘和准备的工作基本上就完成了。</p>

<p>第三步，可视化。可视化框架选择了D3js。用树状来表现分类，节点作为词条，点击词条，可视化展示此词条对应的关键词，使用了BubbleChart，主要涉及了D3js相关的javascript开发。</p>

<p>截止今天，以上的工作就是第一阶段做的事情。总的来说，没有成功的基于维基百科的数据进行挖掘，但是也探索了一条可行的路线，只是这条路线看样子扩展性并不好。于是，近几天忙于寻找一些更好的方式，不论是从数据源还是从挖掘的效果上。最近发现了一个专业的维基百科挖掘工具，(WikipediaMiner)[<a href="http://wikipedia-miner.cms.waikato.ac.nz/index.html">http://wikipedia-miner.cms.waikato.ac.nz/index.html</a>]和weka出自同一所大学，<a href="http://sepans.com/wikistalker/">效果</a>非常好。所以下一步，决定针对这个进行一些研究。先研究其原理，对比下我们挖掘的算法，看看差距在哪里，然后试图利用这个现有的工具，做一些工作。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Python Style Guide]]></title>
    <link href="http://xutianming.github.io/blog/2013/09/22/python-style-guide/"/>
    <updated>2013-09-22T14:01:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/09/22/python-style-guide</id>
    <content type="html"><![CDATA[<p>写Python一段时间了，由于从初学到现在，一直还在熟悉语法和各种数据结构，以事先功能为主，自觉代码写的非常丑陋，现在也写了不少Python代码了，是时候挑战下习惯，遵循合适的代码风格，写简单易读的代码，Be Pythonic!!</p>

<p>本文主要参考了《<a href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html">Google Python Style Guide</a>》、《<a href="http://programmers.stackexchange.com/questions/119913/how-can-i-learn-to-effectively-write-pythonic-code">How can I learn to effectively write Pythonic code</a>》、《<a href="http://python.net/~goodger/projects/pycon/2007/idiomatic/handout.html">Code Like a Pythonista: Idiomatic Python</a>》三篇文章，摘取了其中我现在可能需要遵循的，因为有些做比较大的系统的项目才用到的，暂时就没写。我主要以写小算法和小工具为主。</p>

<p>一、编码风格：</p>

<p>1、不要使用分号，也不要利用分号把两个命令放在一行</p>

<p>2、每行代码不超过80（特殊情况下，尽量不要把链接分开两行放）</p>

<p>3、少用括号，条件语句和return语句不要用括号（特殊情况下，利用括号来进行断行可以）</p>

<p>4、缩进用四空格（一般在文本编辑器里设置tab转四空格）</p>

<p>5、空格使用。语法符号之后用空格，但是括号、花括号、方括号之后不要用。逗号冒号之后有个空格，但是之前不要有。赋值号前后有空格，但是在使用默认参数的时候，不要加。</p>

<p>6、一系列的赋值或者相同的操作。没必要用空格来使赋值号对齐。</p>

<p>7、字符串的使用。尽量使用string format和&#8217;%&lsquo;而不是&rsquo;+&lsquo;。在循环中构造字符串的时候，不要使用&rsquo;+&lsquo;和&rsquo;+=&lsquo;，而是把所有的字符串先存在一个list里，然后在循环结束之后，用join函数。（这一点需要格外注意，具体原因原文有）</p>

<p>8、多行string尽量不要用三个连续的引号，因为会破坏整体的缩进。使用join函数拼接。</p>

<p>9、file和socket使用完毕要显式关闭</p>

<p>10、临时的实现临时插入的代码，使用TODO注释</p>

<p>11、import的组织。每行一个，不要一次import多个。按照标准库、第三方库、程序特有的，这一顺序进行引用，统一级别按照字母顺序排序。</p>

<p>12、命名规范。module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_CONSTANT_NAME, global_var_name, instance_var_name, function_parameter_name, local_var_name。大部分使用了小写和下划线。</p>

<p>13、所有的脚本都应该是可import的，并且脚本被import之后，不能对当前脚本的功能有所影响。所以，脚本都应该有主函数！</p>

<pre><code>def main():
    …
if __name__ == '__main__':
    main()
</code></pre>

<p>不然的话，主程序的逻辑，会在被import的时候被执行。</p>

<p>14、注释。使用正确的注释方法。见原文。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[打表与预处理]]></title>
    <link href="http://xutianming.github.io/blog/2013/09/22/preprocessing/"/>
    <updated>2013-09-22T13:31:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/09/22/preprocessing</id>
    <content type="html"><![CDATA[<p>在ACM编程中，俗称打表，学名预处理。是我最近学习到的一个编程技巧。思想很简单自然，就是当有多组测试数据，但是每组测试数据的计算过程都是一模一样的。这时候，为了提高效率，节省计算资源，就会使用打表。</p>

<p>举例说明，计算斐波那契数列，可能要求输出第30-100项。算法中，我们会自底向上计算，也就是从第1项一直计算到第n项。每计算一项，都是重复这个过程。假如不对算法进行优化的话，我们计算第30项，要从第1项计算过来，计算第100项的时候，还要再从第一项计算一遍，这种情况下，就浪费计算资源了！</p>

<p>对于这种问题的优化思路，就是事先计算好所有可能需要输出的项，比如题目限制n&lt;=10000，那就把前10000项的斐波那契数列都计算好，存在数组里，然后根据测试用例的要求，输出对应的项就好了。</p>

<p>这种计算一次使用多次的思想，与动态规划非常相似。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[卡方校验、信息增益和互信息]]></title>
    <link href="http://xutianming.github.io/blog/2013/09/14/chi-square-information-gain-and-mutual-information/"/>
    <updated>2013-09-14T20:51:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/09/14/chi-square-information-gain-and-mutual-information</id>
    <content type="html"><![CDATA[<p>从一开始做文本分类到现在做的项目，一直在不断的学习新的知识，练习已经掌握的工具，也越来越深刻的认识到，“你所掌握的机器学习方法，并不是死板的一成不变的算法，而是一个一个的小工具，是解决问题的思路”。</p>

<p>这篇博客将对比三个在我进行文本挖掘相关工作的时候经常用到的小工具，以及我对他们的认识，仅限个人的粗浅观点，也是我当前的认识，不见得正确。</p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%9A%AE%E7%88%BE%E6%A3%AE%E5%8D%A1%E6%96%B9%E6%AA%A2%E5%AE%9A">卡方校验</a></p>

<p>首先理解卡方校验的概念，除了维基百科，我总会看<a href="http://www.blogjava.net/zhenandaci/archive/2008/08/31/225966.html">这篇博客</a>。简单来讲，卡方校验是用来判别两个事件是否相关的方法，因此在特征提取、关键词提取中都有很多的应用。基本思路是，首先假设A、B不相关，然后根据A和B的联合概率分布，计算卡方值，公式在定义中都有给出，卡方值越大，越倾向于推翻原假设，也就是A、B越相关。在计算卡方值的过程中，最关键的问题是找到联合概率分布。那么我们应该如何理解卡方值呢？卡方值的含义其实是这样的，我们首先假设A、B不相关，也就是AB相互独立，那么我们可以为联合概率分布中的AB同时成立的事件计算期望值，根据定义公式显示，卡方值是这个期望值和实际值之间的差的平方除以期望值的和（定义和方差很像！），衡量了这两个量拟合的程度。那么，卡方值越大，代表期望值和实际值之间的差越大，也就是我们计算期望值所依赖的假设，是不成立的！</p>

<p>当我们想用卡方检验的方法，去判断两个事件是否相关的时候，理解问题的过程，就是建立事件A、B联合概率分布的过程，找到这个概率分布，就可以计算卡方值。举例说明的话，在文本分类的特征提取这一步，事件A是特征词w是否存在在本篇文档中，事件B是本篇文档是否属于类c。首先假设“w不是类c的特征词”，那么词w在属于类c的所有文档中出现的概率，应当与w在全部文档中出现的概率相同，我们依据这一假设，可以算出w出现在c类的文档数的期望，用期望值和实际值的差的平方除以作为卡方值。</p>

<p><a href="http://zh.wikipedia.org/wiki/%E7%9B%B8%E5%AF%B9%E7%86%B5">信息增益</a></p>

<p>也经常作为特征提取的方法，也用来衡量两个事件的相关性，但是是从信息论的角度来的。信息论用熵来衡量信息量。信息增益，简单理解就是在已知条件B的情况下，事件A的信息量的改变程度，就是熵的改变程度。同样有<a href="http://www.blogjava.net/zhenandaci/archive/2009/03/24/261701.html">一篇博客</a>讲得很透彻。从上面的描述可以看出，计算信息增益的关键是计算熵和条件熵。所以说，信息增益对应的概率分布，是普通的概率分布和一个条件概率分布。那么我们应该如何具体理解信息增益呢？我们首先计算事件A的信息熵，然后考虑事件B，计算在有事件B的情况下的条件熵，两者之差，就是信息熵的改变，改变越大，说明事件B对于事件A的相关性越大。由于涉及到信息论，所以信息量改变这一点，就变的略显抽象。</p>

<p>仿照上文中对卡方校验的介绍。利用信息增益解决问题的关键，在于找到这个条件概率分布，以计算条件熵。同样举文本分类中特征提取这个例子。事件A是指文档属于类ci，事件B是词w是否出现在文档中。根据P(Ci|w)和P(Ci|^w)这两个条件概率分布，可以计算条件熵H(C|T)。</p>

<p>不过仔细读过信息增益的概念，发现我们上面介绍的和KL散度差别挺大的，目前我也不能理解这两种概念是否本质上相同，但是在分类和挖掘领域，大家一般是像我说的那样去理解信息增益的。</p>

<p><a href="http://zh.wikipedia.org/wiki/%E4%BA%92%E4%BF%A1%E6%81%AF">互信息</a></p>

<p>在互信息定义的多条公式中，我一般使用第三个，就是X，Y熵之和减去联合熵。根据联合熵，就可以发现，决定互信息的，也是一个联合概率分布。</p>

<p>比较形象的理解互信息的公式方法是，认为事件X和事件Y相关，可以让总信息熵减少多少，差别越大，X和Y越相关。计算互信息的关键，是计算联合熵，因此在用互信息解决问题的适合，找到这个联合概率分布，是核心。不要试图去寻找其他的概率分布，实践表明，互信息的联合概率分布与卡方检验的非常相似，都是x是否怎样，y是否怎样。同样以文本分类为例，X为文档是否属于类c，Y事件为文档是否包含w，然后利用这个概率分布去计算联合熵。这么一看，和卡方检验几乎完全相同！只是利用了不同的理论基础。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[动态规划]]></title>
    <link href="http://xutianming.github.io/blog/2013/09/02/dynamic-programming/"/>
    <updated>2013-09-02T19:53:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/09/02/dynamic-programming</id>
    <content type="html"><![CDATA[<p>当遇到复杂问题的时候，我们很自然的想要降低问题的复杂度和规模。在《算法导论》中，作者将动态规划和分治算法都当做降低问题规模，将复杂问题转化为子问题的方法。不同的是，分治算法划分出的子问题都是独立的，而动态规划中的子问题相互之间是非独立的，高层的子问题（离原问题比较近）往往依赖于低层子问题。所以假如不利用动态规划，自底向上计算这类问题的时候，会有大量重复的计算，从而使算法的效率低。</p>

<p>那么，动态规划的本质就是建立一个表，存储子问题的结果，在计算高层问题的时候，直接利用表中的结果。这就是动态规划的基本思想。动态规划往往被用来计算最优化问题，利用的理论是子问题最优化理论，也就是一个最优化解的路径上的所有子问题，也都是当前最优化的。但是，这已经不是动态规划的核心了，我之前就在理解动态规划的时候，犯了这个错误。在试图利用动态规划去解决问题的时候，我往往纠结于去寻找这样的最优化子结构。其实有时候，这种最优化子结构并不好找甚至没有，但是也可以利用动态规划去解。动态规划的基本思想，还是很朴素的。</p>

<p>最近在TopCoder上读了一个黄名大牛写的<a href="http://www.topcoder.com/tc?d1=tutorials&amp;d2=dynProg&amp;module=Static">动态规划进阶手册</a>深受启发。文中指出，动态规划应该这么描述：动态规划算法往往建立在一个递归方程和这个方程的初始状态之上（很像那种找递推公式的问题）。每个子问题，都建立在之前发现并计算好的问题上。动态规划问题往往都有多项式级别的复杂度，因此比暴力搜索和回溯算法效率要高（这一点我还不是特别明白，文中有提出，多项式复杂度的问题都可以用动态规划来解决）。</p>

<p>动态规划问题的解决过程是分为两步：定义问题的状态（或者说是子问题），发现如何又一个状态转移到下一个状态（也就是定义状态转移方程，是上文指出的“递归方程”），更准确的说，如何利用已有的子状态，计算下一个状态，因为有时候不是从i转移到i+1。</p>

<p>举例说明：</p>

<p>给定N个硬币，价值分别为（v1，v2，v3&hellip;vN），给定价值和S。求解价值和为S的硬币集合，使其包含的硬币个数最少，每种价值的硬币可以使用任意多个。</p>

<p>问题分析：</p>

<p>在这个问题中我们要求解的结果是价值和S，那么定义“状态”为当前价值和为i（i&lt;S），对于所有的状态j（j>i），要利用i来求解，而对于状态j(j&lt;i)，要在计算状态i之前计算好。在实践中，我发现子状态往往是针对要求解的那个问题的。</p>

<p>对于状态i，我们假设，所有的子状态j（j&lt;i）都已经计算出结果来了。那么i如何利用子结果来计算。对于所有价值小于i 的硬币（循环遍历）j，使用此硬币，使价值和变为i-j，由于i-j&lt;i，那么此子问题，我们应该已经计算好了，假设硬币数为m，则i状态的结果应为m+1。遍历过程中，我们把最小的那个结果存给状态i。</p>

<p>基于这种想法，我们需要从状态0开始，到状态s逐一计算。也就是动态规划中所谓的，从顶向下思考，从底向上计算。这里有个思考陷阱，千万不要想如何从i计算i+1，而是如何利用已有的所有子状态j(j&lt;=i)计算i+1。就写这篇博客的过程，我因为想当然认为这样，差点进入死胡同。</p>

<p>这是动态规划最基本的思考过程。</p>

<p>一般情况下，我们要遍历所有的比i低的状态j，但是并不是所有的j都能转换到i。在这个硬币问题中取决于，是否有个硬币k，使得S[j]+vk=S[i]。这就是状态转移的条件，所以在实践中，我们一般要判断状态j能否转移到条件i，在上例中没有判断的原因是，我们根据硬币价值遍历，遍历到的都肯定满足转移的条件。其他问题，比如无向图中，状态节点j能否转移到节点i取决于i和j之间是否有一条边。这就要判断了，当然假如存储图结构的时候，存储了所有指向节点i的入节点j，就可以遍历这个节点集了，但是对于自底向上的动态规划解决方案中，很少出现。</p>

<p>更复杂一点，状态转移不是一维的，变成二维甚至多维（目前只见过二维）。这种问题，通过比较好的定义子状态，也很好理解。</p>

<p>还有其他的情况下，限制条件所需的信息和我们所求的结果并不一致。比如赋权图中，从节点j到节点i的最短路径，在权值和小于s的前提下。我们最终关心的是路径长度，但是状态转移的限制条件是权值和，这时候需要一个二维数组来存储。</p>

<p>更复杂的情况，乍一看并不是动态规划问题，但是和我们以前遇到过的动态规划问题很像，这时候，我们需要一些转变，把问题转换成以前的问题的升级版去求解。这是最难的，菜鸟级别的我暂时还没什么感受。留在日后补充吧。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[为控件增加鼠标悬浮提示]]></title>
    <link href="http://xutianming.github.io/blog/2013/08/26/tooltips-on-mouse-hover-using-d3/"/>
    <updated>2013-08-26T14:21:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/08/26/tooltips-on-mouse-hover-using-d3</id>
    <content type="html"><![CDATA[<p>上星期阅读了《Interactive Data Visualization for the Web》一书之后，便开始尝试使用D3js了。以前一直没怎么写过前端和界面，个人对于坐标位置布局什么的相当没感觉，总是乱乱的。所以这次写来，大部分也都是用的别人写好的现成的东西，在这个基础上做些改动。</p>

<p>今天做的改动之一就是为标签Text增加鼠标悬浮事件，提示改概念的定义。</p>

<p>效果图如下：</p>

<p><img src="http://i.imgur.com/0E53nrC.jpg" alt="Imgur" /></p>

<p>这段代码参考了StackOverflow上的这个<a href="http://stackoverflow.com/questions/10805184/d3-show-data-on-mouseover-of-circle">帖子</a></p>

<pre><code>// Show defination of the current item
function show_defination(d) {
    d3.select(this)
        .append("svg:title")
        .text(function(d) {return d.def;})
        .attr("x",function(d) {return d.x+10;})
        .attr("y",function(d) {return d.y+10;})
}
</code></pre>

<p>我添加的代码如上，绑定在text控件的mouseover时间上。<code>on("mouseover",show_defination);</code></p>

<p>另外我还发现了一个很好的在线校验json的<a href="http://jsonlint.com/">网站</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ACM中递归问题解决方法思考]]></title>
    <link href="http://xutianming.github.io/blog/2013/08/20/recursion-problem-and-hmm-model/"/>
    <updated>2013-08-20T21:47:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/08/20/recursion-problem-and-hmm-model</id>
    <content type="html"><![CDATA[<p>最近在做ACM的练习题来练习编程的基本功，今天研究到了递归问题。就是通过寻找递推公式，来解决问题。</p>

<p>在总结方法的过程中，发现，对于一些比较简单的题目，可以在纸上比较轻易的模拟过程的问题，可以通过观察第n项与前面的1-3项之间的关系，直接得到递推公式。</p>

<p>比如：</p>

<p><a href="http://acm.hdu.edu.cn/webcontest/contest_showproblem.php?pid=1001&amp;ojid=0&amp;cid=1531&amp;hide=0">超级楼梯</a></p>

<p><a href="http://acm.hdu.edu.cn/webcontest/contest_showproblem.php?pid=1002&amp;ojid=0&amp;cid=1531&amp;hide=0">一只小蜜蜂&hellip;</a></p>

<p>这些问题都比较简单直观，所以很容易思考直接获得递推公式。</p>

<p>而其他的一些问题，可能就相对来说抽象一些，需要我们画图，找一下规律，这时候千万不要怕麻烦，画图可以很直观的帮助我们找到规律，也就是递推公式。</p>

<p><a href="http://acm.hdu.edu.cn/webcontest/contest_showproblem.php?pid=1004&amp;ojid=0&amp;cid=1531&amp;hide=0">骨牌铺方格</a></p>

<p><a href="http://acm.hdu.edu.cn/webcontest/contest_showproblem.php?pid=1009&amp;ojid=0&amp;cid=1531&amp;hide=0">Tiling_easy version</a></p>

<p>比如上面这种铺砖的，画图之后，有目的的去观察，有n-1和n-2项如何去铺砖得第n项，就可以发现递推公式。这种一般从第三项之后，才会有规律。也就是找第四项和第三、第二项之间的关系。</p>

<p>总而言之，这类问题考验思维能力要强于对编程能力的考验。思考的方法更为重要。我大体总结了一下，这类问题主要有两种思考的方式，一种是从前往后，一种是从后往前。</p>

<p>从前往后，就是考察第一、第二项，这一般是递推公式的初始项，然后考察第三项、第四项、第五项，在计算这几项的时候，看能否提出一种可以推广的计算方法，这种方法，抽象来，就是递推公式。这种方法的优点是，比较直观，可以画图，容易理解，缺点是，有些问题没法解决。</p>

<p>从后往前，就是直接考察第n项的得出，有几种可能来构造第n项，每种可能如何用第n-1项、第n-2项的值，来构造。这种方法的优点是通用性更高一些，只要脑筋转的过来，大部分问题都可以通过这种方法找出递推公式。缺点就是比较抽象，不怎么好想。</p>

<p>写到这里，我觉得这种问题的解决，好像是HMM中的前向算法和后向算法，分别就是从前向后和从后向前，进行状态的转移。不过再仔细思考，这也只是形似而已，似乎在本质上，双方没有数学层面上的必然联系。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[对数据可视化的初步认识]]></title>
    <link href="http://xutianming.github.io/blog/2013/08/19/my-general-view-on-data-visualization/"/>
    <updated>2013-08-19T14:06:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/08/19/my-general-view-on-data-visualization</id>
    <content type="html"><![CDATA[<p>先说点废话，导师是研究数据可视化方向的，所以平时在实验室的工作大部分是和数据可视化相关联的。每天至少也会花六七个小时在相关的方面。大四一年七七八八做了很多项目，很少有和数据可视化相关的，个人感觉也都没啥技术含量，觉得大四一年基本上白忙活了，自己也没提高多少。研一的时候开始接触了数据挖掘和机器学习，也去公司实习，学习了很多这方面的知识，对这个方向也有了大致的了解，非常喜欢，很有些相见恨晚的感觉。为什么呢？主要是惊诧于数据的强大力量。说到数据的价值，其实一堆一堆的数字、文字等等，是没什么价值的，价值在于数据中蕴含的信息。</p>

<p>机器学习和数据挖掘，就是这样的工具，可以把信息，从浩瀚的数据海洋中提取出来。海量数据的信息处理，就是最近很火的“大数据”了。在未来，互联网向各个传统行业，我们生活的方方面面不断渗透的过程中，数据挖掘和机器学习的方法，是可以做很多很多的事情的。</p>

<p>再说数据可视化，以前的时候理解一直很不到位，一直觉得数据可视化，就是用一种很好的方式，来展现信息，表达观点，这样可以提高沟通的效率，也很符合人的认知习惯。那么数据可视化，应该技术含量很低，更多的是个经验学科，自己领域里的数据，一般用什么样的形态来表示，这个从业时间长了，自己就了解了。这两天在看《Interative Data Visualization for the Web》这本书（中文好像叫《D3js实战》么？），只看了一点，就有很大收获。但从对数据可视化的由来和认识来讲，感觉作者理解的好深刻。数据可视化分为解释性的可视化（explainatory）和探索性的可视化（exploratory）。前者就是我一直认为的那样，而后者我导师一般说是“可视分析”，通过提供对数据的交互手段，帮助人们挖掘知识、信息。</p>

<p>那么数据可视化和数据挖掘机器学习应当是有着非常密切的关系的。先说解释性的可视化。一般来讲，我们说数据挖掘机器学习是非常强大的工具，可以帮助我们从数据中学习，以进行分类、回归、聚类等工作，解决实际问题。那么挖掘出来的信息，需要交流和传递，才能有产生价值，这时候，数据可视化可以帮助你，更好地把你想表达的信息传递出去。那么可视分析呢，意义在于，有些问题，数据挖掘可能帮不上忙，但是人们的长期工作以来，经验积累，有很多先验知识，这些知识一般比较难在数据挖掘的过程中有所帮助。那么可视分析就可以帮助这些有经验的人士，更好的操作数据，可以快速的产生数据的不同视图，让其他行业的专家也可以享受到挖掘的福利。这方面，美国已经有企业做的很成熟了，公司也都上市了，Tableau。回头我也要试用学习一下。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[C++输入输出总结]]></title>
    <link href="http://xutianming.github.io/blog/2013/08/07/c-plus-plus-input-and-output/"/>
    <updated>2013-08-07T09:23:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/08/07/c-plus-plus-input-and-output</id>
    <content type="html"><![CDATA[<p>输入：
1 . 未说明有多少个input block</p>

<pre><code>while(scanf("%d %d",&amp;a,&amp;b)!=EOF) 
{    ...    }
</code></pre>

<p>scanf返回的是输入的变量的个数，EOF=-1表示没有输入</p>

<pre><code>while(cin&gt;&gt;a&gt;&gt;b) {    ...    }2 . 说明有N个input block    

scanf("%d",&amp;n) ;    for( i=0 ; i&lt;n ; i++ )     {...} 
    cin &gt;&gt; n;   for( i=0 ; i&lt;n ; i++ )     { .... } 3 . 输入是一整行的字符串
C  
char buf[20];     gets(buf); 

// 如果用string buf;来保存：
getline( cin , buf );     // 如果用char buf[ 255 ]; 来保存：     cin.getline( buf, 255 );
</code></pre>

<p><code>scanf(“ %s%s”,str1,str2)</code>，在多个字符串之间用一个或多个空格分隔；若使用gets函数，应为gets(str1); gets(str2); 字符串之间用回车符作分隔。通常情况下，接受短字符用scanf函数，接受长字符用gets函数。而getchar函数每次只接受一个字符，经常c=getchar()这样来使用。getline 是一个函数，它可以接受用户的输入的字符，直到已达指定个数，或者用户输入了特定的字符。它的函数声明形式（函数原型）如下：    <code>istream&amp; getline(char line[], int size, char endchar = '\n');</code>不用管它的返回类型，来关心它的三个参数：
* char line[]： 就是一个字符数组，用户输入的内容将存入在该数组内。<em> int size : 最多接受几个字符？用户超过size的输入都将不被接受。</em> char endchar :当用户输入endchar指定的字符时，自动结束。默认是回车符。例如：char name[4];cin.getline(name,4,&lsquo;\n&rsquo;);由于 endchar 默认已经是 &lsquo;\n&#8217;，所以后面那行也可以写成：cin.getline(name,4);输出：
1 . 输出之后换行    C:    {     &hellip;.     printf(&ldquo;%d\n&rdquo;,ans);     }     C++:    {     &hellip;     cout &lt;&lt; ans &lt;&lt; endl;     }
2 . 每个输出之间有空行</p>

<pre><code>  while(scanf("%d %d",&amp;a, &amp;b) != EOF)           printf("%d\n\n",a+b);    
C++:    cout &lt;&lt; ans &lt;&lt; endl &lt;&lt; endl;
</code></pre>

<p>3 . 输出结束之后输出空行</p>

<pre><code>C:    for (k=0;k&lt;count;k++) {     while (…) {              printf(" %d\n",result);       
  }       
  if (k!=count-1) printf("\n");     
}     C++   // 类似，输出语句换一下即可。
</code></pre>

<p>在学习了以上基础之后，我在HDUOJ上做了十几个题目来练习，也犯了不少错误，总结如下，以避免以后再犯，提高编程的成功率和效率：
* 未说明有多少个输入块时，scanf要和EOF比较，这个和cin的使用不同，不然的话OJ上会超时
* 同样的道理，也不要用<code>while(true)</code>来代替<code>while(cin&gt;&gt;a)</code>，也会在输入结束的时候，仍然执行从而超时
* 再就是输出有换行，要输出两个<code>endl</code>的时候，要注意假如指定输入个数，最后一次输出之后，不要再换行的。没指定有多少个输入的时候，则每次输出都换行。
另外，我还犯了其他一些低级错误，比如数据类型定义错误等等，这些错误自己调试的时候，不会出错，但是OJ上指定的某些测试用例肯定是没法通过的。所以要格外小心，OJ也不会告诉你哪个测试用例挂了，就很浪费时间，为了提高效率，写程序的时候就得多注意下，看清题目。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[姥爷的老房子，我的童年]]></title>
    <link href="http://xutianming.github.io/blog/2013/07/24/bye-my-childhood/"/>
    <updated>2013-07-24T12:59:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/07/24/bye-my-childhood</id>
    <content type="html"><![CDATA[<p>前几天，姥爷去世了。最疼爱我的姥爷，离开了。这几天一直在忙着各种后事，今天终于得以清闲，和爸爸妈妈一起给姥爷打扫房间，处理一些剩余的食物，几年来，也是第一次再好好看看这栋房子，也许，以后再也没机会了吧。</p>

<p>现在居住的大院里，几乎有我童年的所有回忆，从幼儿园起，我就在这所大院里玩，幼儿园-学前班-小学，直到小学五年级，我们家也搬了进来，住在姥爷家对面的楼上，于是，我的初中-高中也在这里度过。直到我考上大学，18岁，离开了泰安，去往武汉，再来到北京。一晃已经5年过去了，我也已经23岁了。</p>

<p>我生命的前十八年，几乎都是在这座大院里度过，几乎都和姥爷家密不可分，那时候，我几乎每天每星期，都会过来。都会亲亲姥爷的脸，都会吃姥爷给我买的零食。但是，随着姥爷的离开，也许过不了多久，我就要和这栋老房子说再见了。</p>

<p>我想在我的博客里，留下这些记忆。</p>

<p><img src="http://i.imgur.com/sm0cACZ.jpg" alt="Imgur" /></p>

<p>那时候，每天放学，我都会飞奔到姥爷家，看会报纸，吃会零食，放自行车，或者取家里的钥匙然后回家。姥爷经常会在我放学的点，站在门口的石榴树下等我回来，帮我停自行车，好让我赶紧回家休息。</p>

<p><img src="http://i.imgur.com/bquu6Dd.jpg" alt="Imgur" /></p>

<p>姥爷家的碳池子，秋天囤积碳，以供冬天取暖，不过已经废弃太久了，我记事起，这个就没用过，但是这成了我的游乐场所，我经常爬上爬下，从下面的小门里钻进钻出。</p>

<p><img src="http://i.imgur.com/DSjVd2p.jpg" alt="Imgur" /></p>

<p>姥爷门前的石榴树，也是我的乐园。由于疏于打理，每年夏天石榴树都会结很多的果子，但是秋天不到，大部分果子就都掉了。到了果实成熟的时候，往往只有几颗果子，这时候姥爷会分给我们几个小孩一人一个，超级甜。</p>

<p><img src="http://i.imgur.com/6hCeTbQ.jpg" alt="Imgur" /></p>

<p>正是7月底，就有些石榴炸开花了。大部分石榴都留不到秋天。</p>

<p><img src="http://i.imgur.com/LcbfokW.jpg" alt="Imgur" /></p>

<p>石榴树是很多蚂蚁的家。有时候我是这些蚂蚁的朋友，但大部分时间，我是他们的灾难。我会用开水烫，用脚踩，用针扎；偶尔无聊的时候，我会在小院里用蝇拍打苍蝇，喂他们，而且一般都不把苍蝇完全打死，看着苍蝇被蚂蚁撕咬。</p>

<p><img src="http://i.imgur.com/W74Vt1p.jpg" alt="Imgur" /></p>

<p>这是姥爷请人搭建的小储藏室，是他的百宝箱。他会把各种暂时用不到的东西都放进去，里面堆满了东西，但是都整齐的码在四周的墙上，屋子的中间还是留了很大的空地。姥爷是个仔细的人，什么都一丝不苟，力图做到干净整洁。墙上，还留有张贴姥爷讣告的痕迹。</p>

<p><img src="http://i.imgur.com/zIsTacF.jpg" alt="Imgur" /></p>

<p>进门是个小走廊，墙上的油迹还在，姥姥在世的时候，经常会在这里生火做饭，用小小的蜂窝煤炉子，想来现在应该再没人烧蜂窝煤了吧。那已经是十几年前的事情了。</p>

<p><img src="http://i.imgur.com/KuSvvfp.jpg" alt="Imgur" /></p>

<p>我长个子的时候，姥爷仔细的在墙上记录着我身高的变化，那是我小学的时候，等高中了，我已经比姥爷还高了。亲姥爷的时候，都需要弯下腰，姥爷要拍我的后脑勺，也得拉着我的脖子才可以。</p>

<p><img src="http://i.imgur.com/VQA7ptN.jpg" alt="Imgur" /></p>

<p>姥爷家的小院子，我的乐园。屋子窗下，姥爷搭的小台子，摆放一些杂物和花盆，台子下面，则是我的藏宝库，我把各种脏兮兮的玩意，藏在这下面，第二天继续玩。我在这里冻过冰，养过蝌蚪。</p>

<p><img src="http://i.imgur.com/xuEi1WQ.jpg" alt="Imgur" /></p>

<p>小院里的水龙头，姥姥会在这里洗菜洗衣服，这样不会弄脏屋子。而这里，是我的弹药补给地，那时候喜欢玩水，水枪、喷壶等等，石榴树上的蚂蚁，自然成了我的攻击对象。</p>

<p><img src="http://i.imgur.com/XUVWbUS.jpg" alt="Imgur" /></p>

<p>小院里的排水沟，姥爷自己通的，我经常在这里撒尿，一直到年纪很大了还这样，在墙上画地图，每次姥爷都会笑着骂我，但是从来没制止过我。</p>

<p><img src="http://i.imgur.com/gJSWPF4.jpg" alt="Imgur" /></p>

<p>进了屋子，是姥爷平时坐着喝茶的地方，最早的时候，姥爷和姥姥会在这里说话，后来只剩下了姥爷，再后来，姥爷也离开了。妈妈说我刚生下来，可以横着躺在沙发上，头脚都不会够到扶手。</p>

<p><img src="http://i.imgur.com/RxQrOYO.jpg" alt="Imgur" /></p>

<p>沙发旁的壁橱，姥爷放各种点心饮料的地方，每次来，我都会钻进壁橱，找我喜欢吃的东西。</p>

<p><img src="http://i.imgur.com/yL04Xdk.jpg" alt="Imgur" /></p>

<p>黑色的老鹰，一直都在，展翅雄飞。姥爷一直爱用的纸日历，已经好久没人撕了。小时候，每天早上我就会着急的撕下当天的日历，可是现在才明白，被撕去的日历，就是过去的时间，再也回不来了。</p>

<p><img src="http://i.imgur.com/VVZ2qox.jpg" alt="Imgur" /></p>

<p>姥爷的卧室，一如既往的整洁。姥爷每天下午的时光都是在这里度过的，睡了午觉，然后坐在写字台前练字，计划最近要做的事情，读报纸杂志。小时候，我趴在床上看《新白娘子传奇》的样子还历历在目，只是那时候的电视好小，也只有几个电视台。</p>

<p><img src="http://i.imgur.com/sOLBZFz.jpg" alt="Imgur" /></p>

<p>写字台的玻璃下面，会压着姥爷要记的事情，一些生活常识以及保健知识。还有所有孩子的电话。里面没有我的电话，因为一般都是我给姥爷打电话，而且我在外上学，号码常换。</p>

<p>物是人非，姥爷离开我们了，再也没人给我压岁钱，亲切的问我钱够不够花，学习情况怎么样，叮嘱我好好学习了。很快，爸爸妈妈也会搬离这个大院，住到新房子里，这里的样子，会越来越模糊吧。可是，这几乎我对泰安这个小城所有记忆的缩影，我18年最主要的记忆，都是和这里相关的。人总会长大，我也已经离开泰安5年了，还不知道以后会生活在哪个城市，但是应该很难再回来吧。</p>

<p><img src="http://i.imgur.com/8xQVz35.jpg" alt="Imgur" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[核函数理解]]></title>
    <link href="http://xutianming.github.io/blog/2013/07/20/understanding-kernel-function/"/>
    <updated>2013-07-20T11:13:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/07/20/understanding-kernel-function</id>
    <content type="html"><![CDATA[<p>SVM相关的理论知识看过几遍，但是感觉一直都不是理解的很透彻，特别是核函数的概念。今天又查阅了大家写的学习笔记等资料，结合自己的实践经验，感觉对核函数的理解更进一步了，所以记录在这里。</p>

<p>一句话说明核函数的意义和作用：为使非线性可分问题转化为线性可分，将特征向量映射到高维，映射函数所满足的性质。</p>

<p>具体说来，svm可以直接解决线性可分的分类问题，对于近似线性可分的问题，通过增加松弛变量，也可以实现分类。那么对于非线性可分的问题呢，比较直观的想法是映射，也就是通过把特征映射到高维，使非线性可分问题转化为线性可分的问题。但是就一般的实际问题来讲，寻找这个映射很困难，而且很难有可推广的方法。于是提出了kernel trick。可以绕过寻找这个映射函数。</p>

<p>在理论公式的推导中，可以算出参数w的表示方法：</p>

<p><img src="http://i.imgur.com/KqPVcLl.png?1" alt="Imgur" /></p>

<p>于是分类超平面的函数也可以写成：</p>

<p><img src="http://i.imgur.com/UVGLjMS.png?3" alt="Imgur" /></p>

<p>这个公式中只有&lt;x(i),x>的内积形式，也就是说，我们映射之后，需要计算&lt;Fi(xi),Fi(x)>的内积。而我们定义的核函数，就是这一内积的形式。</p>

<p><img src="http://i.imgur.com/lLicBOp.png?1" alt="Imgur" /></p>

<p>如此一来，我们就可以用核函数直接替换内积，相当于，我们把原始的特征向量，映射到了高维，并且避免了寻找映射函数。而libsvm中推荐使用的RBF核函数，就是一个有着良好特性的核函数。可以将样本映射到一个更高维的空间，可以处理非线性的分类问题。而其关键的参数c和g分别为惩罚因子和核函数的参数。（RBF 核K(x, y) = exp(－γ || x －y ||的平方),γ > 0，g为gamma，就是r）。我们在使用libsvm训练之前，应该首先寻找最优的参数c和γ。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[文本分类实践]]></title>
    <link href="http://xutianming.github.io/blog/2013/07/19/text-classification-in-action/"/>
    <updated>2013-07-19T22:14:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/07/19/text-classification-in-action</id>
    <content type="html"><![CDATA[<p>学习机器学习有一阵子了，先是仔细阅读了《统计学习方法》这本书，对目前比较流行的统计学习方法和模型有了大致的认识，比如朴素贝叶斯、逻辑斯蒂回归、支持向量机、隐马尔科夫模型等等。但是仅仅有理论上的认识是不够的，关键还是指导实践解决问题。</p>

<p>先前在百度实习的时候，已经对机器学习有了初步的认识，并且当时也利用逻辑斯蒂回归训练了一个还算不错的模型，虽然最终由于时间原因，没有做成一个可以应用到线上的模块，但是对于我对机器学习的这第一次尝试，我还是很满意的，当时也决定在研二的这一年里，好好研究一下机器学习相关的东西，以后好找相关方向的工作。</p>

<p>最初的实践决定从文本分类开始，因为这个领域相对来说研究的比较成熟，并且在工业界仍然有很多很重要的应用。由于svm一直是个非常重要的机器学习模型，之前对原理有一定的了解，于是决定从使用svm开始。网上相关的教程很多，我也是慢慢参考着别人的方法一步一步尝试。这里主要记录下我实践的过程，以供日后参考。</p>

<p>文本分类大致分为以下几步：</p>

<ul>
<li>数据预处理（一般是分词，去停）</li>
<li>特征选择（比较好的方法有卡方校验和信息增益）</li>
<li>特征值确定（比较好的是tf-idf值）</li>
<li>特征向量计算</li>
<li>模型训练</li>
<li>模型测试</li>
</ul>


<p>我使用的是复旦大学自然语言理解实验室提供的预料，选取了computer、agriculture、sports和history，选择分类的时候特意选择了差别比较大的几类，这样可以在某种程度上提高分类效果吧。</p>

<p>首先是数据预处理，我使用了同事推荐了一个分词工具，分词的效果不是很好，算是个初级的分词工具，基于python的，使用起来非常简单。分词之后，把预料中的文章，处理成了一个词一行的文档，便于下一步的处理。</p>

<p>数据预处理之后，就是选择特征了，这里所谓的“特征”，就是上一步分出来的一个一个的词，每个词都可以说是一个特征，但是把每个特征都哪来使用，显然是不现实的，太高维的特征向量，首先训练起来比较费时，另外会使模型复杂度提升从而容易使svm训练过拟合。我训练的时候，本想使用1w维的特征，最终使用了7600左右的特征，具体的我后面会说。考虑到以上原因，所以要有个特征选择的过程，也就是选择那些可以很好的区分每一类的词，比如包含了“农业”一词的文章，属于农业类的可能性比较大，所以这样的词，就算是好特征。那么如何筛选出这些特征呢，要有个数学上的量，来衡量特征的好坏，可供选择的有互信息、信息增益、卡方校验等方法。其中互信息的效果比较差，我就没自己尝试，我先后使用了信息增益和卡方校验的方法。</p>

<p>卡方校验，学名是“皮尔森卡方检验”，是一种假设检验方法。首先，我们的假设是“词word和类class不相关”，然后针对包含word的文档和以及属于class的文档的联合分布，算卡方值，每类选择卡方值最大的2500个值，去作为特征值，因为卡方值越大，倾向于原假设为假，也就是说，卡方值越大，词word和类class越相关，这个词就是我们要找的好特征。为啥是2500个值，因为我初步决定选择1w个特征么，一共四类，每一类选择2500个。最终计算下来，因为分词效果的原因，很多单字的特征被筛选出来，但是单字的信息非常少，我觉得不足以作为一个好的特征，所以我对于筛选出来的1w个特征，去除了那些单字的词，就剩下了大约7600个词作为特征。</p>

<p>特征选择出来之后，我们要利用这些特征去表示要分类的文档，也就是所谓的“把文档映射到特征空间”，用向量来表示文档。这里会遇到一个问题，如何用特征表示文档，另外每个特征对于一个文档都是等同重要的嘛？这里就自然涉及到为特征赋权重。我是用的是tf-idf值。选择这个的原因是，卡方校验有个缺陷，就是“低频率缺陷”，那些在一篇文档里只出现过一次的词，也有可能会有很大的卡方值，但是这个词，对这篇文章可能没太大价值，那些只在某一类文章中大量出现，而在其他类中很少出现的词，才是决定类别的词。而我个人认为tf-idf值可以比较好的弥补这一缺陷。当然我只是定性分析，我不太懂数学上的证明，也没去查阅相关的资料。</p>

<p>如此一来，我们把文档用特征向量来表示了，接下来就是训练模型了。在上述过程的实现过程中，我没有遇到太大的问题，unix+python是很有利的文本处理工具，实现起来很快。我是用的svm工具是libsvm，使用也很简单，但是我确实在训练模型的时候遇到了一个问题。</p>

<p>一般来讲，libsvm的使用流程是这样的：</p>

<ul>
<li>svm-scale，对数据进行归一化处理，映射到[0,1]区间内</li>
<li>grid.py 寻找最优参数c和g</li>
<li>svm-train</li>
<li>svm-predict</li>
</ul>


<p>我第一次使用的时候，用信息增益选择特征，libsvm不太懂，也没去查太多的资料，略去了第二步，也就是我训练的时候没指定参数。这训练效果太差了，把所有的文档都分到了一类中。一开始我总怀疑特征提取的不好，于是换卡方校验，结果还是这样，之后开始怀疑我训练的方法不对，于是很快发现了问题。在指定c和g参数之后，训练结果非常好，对训练数据的准确率为100%，在测试集上的准确率为93.52%，比人家论文上的准确率还高，非常让人振奋。</p>

<p>至此，算是完满的完成了一次svm文本分类的实践，结果也符合之前给自己定的目标90%以上的准确率。接下来，我会根据这次实践的结果，总结分析，再回归到svm的理论上，比如c和g具体含义对应的是什么，借此机会深入理解svm，好更好的掌握这个工具的使用。然后还会再用同样的方法，实践体会其他的分类模型，比如逻辑斯蒂回归、神经网络等等。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[由invocationTargetException引发的思考]]></title>
    <link href="http://xutianming.github.io/blog/2013/07/11/invocation-target-exception/"/>
    <updated>2013-07-11T16:28:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/07/11/invocation-target-exception</id>
    <content type="html"><![CDATA[<p>最近接到的项目，终于过了第一轮，兴奋之余还是要静下心来好好研究代码。第二轮得分只有60分，意料之中，做的时候就发现有很多不会的了，当时及时记录下来，所以这次看代码也有针对性的多。</p>

<p>逻辑代码最大的问题还是出在异常处理上，有很多不合适的地方，不过经历过这次下次应该不会再犯了。测试依然疑问最多，很多莫名的异常不知道如何抛出，归根到底还是Java的基础不牢，不过这也不是一天两天的事情，见的多了自然熟悉。</p>

<p>今天看到一个很常见的异常&mdash;InvocationTargetException，顾名思义，在反射机制中，如果当前执行的方法所调用的方法抛出异常，会被包装成这个异常，</p>

<p>当然这在之前我是不知道的。因为在coding的时候，一写反射的语句，IDE会自动提示需要处理这个异常，于是乎很自然而然的就写上了catch（InvocationTargetException），不需要理由。可是当编写单元测试的时候问题就来了，你需要构造一套参数，让函数抛出这个异常以验证代码可以捕获这个异常。</p>

<p>最一开始是从研究Winner的代码开始的，看到Winner写的对应的测试，很是摸不着头脑，不知道Winner的参数为何可以导致异常，上网查资料，除了API只外几乎没有任何资料，API中对于这个异常又描述甚少。手头的各种Java工具书这时候也派不上用场了。无计可施，只好请教学长。其实这个问题大家平时都遇到过，因为反射是TC上最常用到的技术之一，可能是因为太不显眼，所以大家之前都不约而同的无视它了。现在提出来，于是我们一起摸索。</p>

<p>摸索的过程也是我学习的过程，很多思想我慢慢树立起来。构造异常测试，首先看配置文件，因为参数的不合法是导致异常的最常见原因。总之要充分利用项目文档所提供给我们的信息，这可以极大的提高开发的效率和质量。毕竟很多问题已经不需要我们去思考了，designer已经为我们考虑到，我们只需要照做。对于如此短的项目周期来说，这一点很重要。</p>

<p>这个异常是反射机制定义的异常，自然在开发文档中找不到了。接下来我们还是走了小小的弯路，我们找来了JDK的源码&hellip;&hellip;各种复杂的关系和调用，最终崩溃。放弃&hellip;&hellip;不过我还是学了一小招。参考源码确实能解决很多问题，但是这在简单的类中比较实用。比如说String这样的类，里面的诸如substring ,spilt等方法可以给我们提供算法的灵感。</p>

<p>学习Java最直接的工具还是API文档了。我无意间查到了抛出这个异常的newInstance方法，下面明确写着，当新建对象的类构造方法在被调用时抛出异常，此异常将被抛出。问题解决了：测试者提供的给构造方法的参数有两个，而此类构造方法只接受一个参数，于是乎异常被抛出。</p>

<p>最终的答案是简单的，但是要是在项目开发中意识到这个问题难度还是很大的，需要有对项目足够的理解再加上足够的开发经验才能做到。对项目整体功能的把握和对每个细节精确的理解，是我所发现的最大差距所在，也将是我近期努力的目标。毕竟所掌握的技术和各种编码技巧不是一个技术人员价值的最大体现。严谨的思维和对细节的把握才是技术人员身上的闪光点，这是无可替代的。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[博客迁移声明]]></title>
    <link href="http://xutianming.github.io/blog/2013/07/11/blog-migration-announcement-and-markdown-trial/"/>
    <updated>2013-07-11T13:12:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/07/11/blog-migration-announcement-and-markdown-trial</id>
    <content type="html"><![CDATA[<p>从今天起，就要从原先的博客园博客迁移到我的github博客啦。以后这个博客上会更多的放我自己写的东西，然后博客园的博客用来进行日常学习摘抄和积累，毕竟博客园博客写起来更方便一些，也不需要在我的机器上。</p>

<p>由于现在这个博客很空，这几天我会陆续搬一些以前我自己写的东西在这上面，这样可以帮助我快速掌握这个博客的使用方法，并且也熟悉一下markdown的语法，以后真要写东西就不会为这些事情烦心了。</p>

<p>终于有了属于自己的博客站点，好开心，感谢github，感谢octopress。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Creating a Github Blog Using Octopress]]></title>
    <link href="http://xutianming.github.io/blog/2013/07/10/creating-a-github-blog-using-octopress/"/>
    <updated>2013-07-10T10:56:00+08:00</updated>
    <id>http://xutianming.github.io/blog/2013/07/10/creating-a-github-blog-using-octopress</id>
    <content type="html"><![CDATA[
]]></content>
  </entry>
  
</feed>
